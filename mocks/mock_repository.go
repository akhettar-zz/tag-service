// Code generated by MockGen. DO NOT EDIT.
// Source: repository/database.go

// Package mocks is a generated GoMock package.
package mocks

import (
	bson "github.com/globalsign/mgo/bson"
	gomock "github.com/golang/mock/gomock"
	model "github.com/tag-service/model"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockRepository) Insert(database, collection string, content interface{}) error {
	ret := m.ctrl.Call(m, "Insert", database, collection, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockRepositoryMockRecorder) Insert(database, collection, content interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepository)(nil).Insert), database, collection, content)
}

// FindAll mocks base method
func (m *MockRepository) FindAll(database, collection string, query bson.M) ([]model.TagDAO, error) {
	ret := m.ctrl.Call(m, "FindAll", database, collection, query)
	ret0, _ := ret[0].([]model.TagDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockRepositoryMockRecorder) FindAll(database, collection, query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRepository)(nil).FindAll), database, collection, query)
}

// Find mocks base method
func (m *MockRepository) Find(database, collection string, oid bson.ObjectId) (model.TagDAO, error) {
	ret := m.ctrl.Call(m, "Find", database, collection, oid)
	ret0, _ := ret[0].(model.TagDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockRepositoryMockRecorder) Find(database, collection, oid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRepository)(nil).Find), database, collection, oid)
}

// Delete mocks base method
func (m *MockRepository) Delete(database, collection string, oid bson.ObjectId) error {
	ret := m.ctrl.Call(m, "Delete", database, collection, oid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(database, collection, oid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), database, collection, oid)
}
